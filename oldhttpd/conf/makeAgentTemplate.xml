<?xml version="1.0" encoding="iso-8859-1" ?>
<project name="amtokens" default="usage">
    <!--
        Do substitution of tokens in a master template
        
        Generate per node, per port, access manager configuration templates
        for test or production, on the current web node

        Read "virtual-host-map.txt" and "policy-url-file.txt"
        and use them to generate a final access manager configuration
        and perhaps install it.

        The directories used can be optionally specified as defines.

    -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="/usr/share/java/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

   <target name="usage">
        <echo message="ant -f makeAgentTemplate -Dmode=MODE (all|install)" />
        <echo message="MODE is test or prod" />
        <echo message="other defines are:" />
        <echo message="library_directory" />
        <echo message="input_directory" />
        <echo message="work_directory" />
        <echo message="install_directory" />
    </target>

    <target name="all" depends="init_properties,replace_tokens,run_jar_file">
    </target>

    <target name="install" depends="install_result">
    </target>

    <target name="init_properties">

        <!-- node-specific details come from the "this-node.properties" file -->

        <!-- node properties file path, fixed except for testing -->
        <property name="node_properties_path"
            value="/local-adm-pub/config/this-node.properties" />

        <loadproperties srcFile="${node_properties_path}" />

        <!-- mode is "test" or "prod", defaults to "test" -->
        <property name="mode" value="test" />

        <!-- read-only sources directory, used for master template, jar file -->
        <property name="library_directory" location="." />

        <!-- text source directory used for .txt input files
             (these change fairly often)
        -->
        <property name="input_directory" location="." />

        <!-- work directory, used for intermediate files -->
        <property name="work_directory" location="." />

        <!-- AMAgent.properties install directory,
            used for installing result .properties files -->
        <condition property="install_directory"
            value=  "/var/local/web_agents/apache22_agent/Agent_001/config"
            else=   "/var/local/web_agents/apache22_agent/Agent_002/config"
        >
            <equals arg1="${mode}" arg2="prod" />
        </condition>

        <!-- fall-back install directory -->
        <property name="install_directory" location="." />

        <!-- constant base properties template -->
        <property name="master_template_path"
            location="${library_directory}/master-template.properties" />

        <!-- generated file: per node per instance property template -->
        <property name="node_template_path"
            location="${work_directory}/am_template_${shortname}_${mode}_template.properties" />

        <!-- input file: "virtual-host-map.txt" -->
        <!-- full path to "virtual-host-map.txt" file -->
        <property name="virtual_host_map_path"
            location="${input_directory}/virtual-host-map.txt" />

        <!-- input file: "policy-url-file.txt" -->
        <!-- full path to "policy-url-file.txt" file -->
        <property name="policy_url_file_path"
            location="${input_directory}/policy-url-file.txt" />

        <!-- output properties file, in working directory -->
        <property name="work_properties_path"
            location="${work_directory}/AMAgent_${shortname}_${mode}.properties" />

        <!-- output AMAgent.properties file in final directory -->
        <property name="install_properties_path"
            location="${install_directory}/AMAgent.properties" />

        <!-- web port -->
        <condition property="port" value="80" else="8002" >
            <equals arg1="${mode}" arg2="prod" />
        </condition>

        <!-- string for directory path changes
            "" for production, "test-" for test -->
        <condition property="testdash" value="" else="test-" >
            <equals arg1="${mode}" arg2="prod" />
        </condition>

        <!-- access manager log level -->
        <condition property="amloglevel" value="all:3" else="all:3" >
            <equals arg1="${mode}" arg2="prod" />
        </condition>

        <!-- jar file used to generate the properties -->
        <property name="jar_file_path"
            location="${library_directory}/make-agent-properties-two.jar" />

        <!-- class path for running the jar file -->
        <path id="project.class.path">
            <pathelement location="${jar_file_path}"/>
            <pathelement path="${classpath}"/>
        </path>

        <!--
        <echo message="mode=${mode}" />
        <echo message="web node shortname=${shortname} port=${port}" />
        <echo message="web node fqdn=${fqdn}" />
        <echo message="am log level=${amloglevel}" />
        <echo message="" />
        <echo message="library_directory=${library_directory}" />
        <echo message="input_directory=${input_directory}" />
        <echo message="work_directory=${work_directory}" />
        <echo message="install_directory=${install_directory}" />
        <echo message="" />
        <echo message="master_template_path=${master_template_path}" />
        <echo message="node_template_path=${node_template_path}" />
        <echo message="result properties as=${work_properties_path}" />
        -->

        <!-- <echoproperties/> -->

    </target>

    <!-- check dest directories exist, so we don't create unexpected stuff -->
    <target
        name="work_dir_ok"
        depends="init_properties"
    >
        <available
            property="work_dir_ok"
            file="${work_directory}"
            type="dir"
        />
        <fail
            message="work_directory not found: ${work_directory}"
            unless="${work_dir_ok}"
        />
    </target>

    <target
        name="install_dir_ok"
        depends="init_properties"
    >
        <available
            property="install_dir_ok"
            file="${install_directory}"
            type="dir"
        />
        <fail
            message="install_directory not found: ${install_directory}"
            unless="${install_dir_ok}"
        />
    </target>


    <!-- copy master to per-node file before replace -->
    <target name="copy_template"
        depends="init_properties,work_dir_ok"
        if="${work_dir_ok}"
    >
        <copy file="${master_template_path}"
              tofile="${node_template_path}"
              preservelastmodified="true"
              overwrite="true"
        />
    </target>

<!--
    A sample node properties file:

    [lunde@chnuinfow3 ~]$ more /local-adm-pub/config/this-node.properties
    # This node's properties
    shortname=      chnuinfow3
    fqdn=   chnuinfow3.it.northwestern.edu
    ip=     165.124.65.32
    option= HCHNUINFOW3
    campus= chicago
    is_evanston=    false
    is_chicago=     true
    WebSSO servers in the prefered order for this campus
    websso1=          wamprod3.itcs.northwestern.edu
    websso2=          wamprod4.itcs.northwestern.edu
    websso3=          wamprod1.itcs.northwestern.edu
    websso4=          wamprod2.itcs.northwestern.edu
    # end with a comment
-->

<!--
    What we are replacing in the master template:

    # template tokens
    # SERVERFQDN={@SERVERFQDN@}
    # PORT={@PORT@}             ("80" for prod, "8002" for test)
    # PRODORTEST={@PRODORTEST@} ("prod" or "test")
    # WAMFQDNA={@WAMFQDNA@}     (websso servers in order for this campus)
    # WAMFQDNB={@WAMFQDNB@}
    # WAMFQDNC={@WAMFQDNC@}
    # WAMFQDND={@WAMFQDND@}
    # TESTDASH={@TESTDASH@}     ("" for prod, "test-" for test)
    # AMLOGLEVEL={@AMLOGLEVEL@}

-->
    <target name="replace_tokens"
        depends="init_properties,copy_template,work_dir_ok"
        if="${work_dir_ok}"
        >
       <!-- UTF-8 encoding may fail in our scripts -->
       <replace
            file="${node_template_path}"
            encoding="iso-8859-1"
       >
            <replacefilter token="@SERVERFQDN@"     value="${fqdn}" />
            <replacefilter token="@PRODORTEST@"     value="${mode}" />
            <replacefilter token="@PORT@"           value="${port}" />
            <replacefilter token="@TESTDASH@"       value="${testdash}" />
            <replacefilter token="@AMLOGLEVEL@"     value="${amloglevel}" />
            <replacefilter token="@WAMFQDNA@"       value="${websso1}" />
            <replacefilter token="@WAMFQDNB@"       value="${websso2}" />
            <replacefilter token="@WAMFQDNC@"       value="${websso3}" />
            <replacefilter token="@WAMFQDND@"       value="${websso4}" />
        </replace>
    </target>

<!--
        $java_path,
        "-jar","make-agent-properties-two.jar",
        $node_template_path,    # input-properties template
        $properties_temp_path,  # output-properties
        $virtual_host_map,      # virtual-hosts-map
        $policy_url_file,       # enforced-url-file
        @ports,                 # port
-->

    <!-- run jar file to create the access manager config -->
    <target name="run_jar_file"
        depends="init_properties,replace_tokens,work_dir_ok"
        if="${work_dir_ok}"
        >

        <delete file="${work_properties_path}" />

        <java
            jar="${jar_file_path}"
            classpathref="project.class.path"
            fork="true"
            dir="${work_directory}"
            >
            <arg value="${node_template_path}" />
            <arg value="${work_properties_path}" />
            <arg value="${virtual_host_map_path}" />
            <arg value="${policy_url_file_path}" />
            <arg value="80" />
            <arg value="8002" />
        </java>

    </target>

    <!-- copy result to final directory and name -->

    <target name="install_result"
        depends="init_properties,run_jar_file,work_dir_ok,install_dir_ok"
        if="${install_dir_ok}"
        >
        <copy file="${work_properties_path}"
              tofile="${install_properties_path}"
              preservelastmodified="true"
              overwrite="true"
              encoding="iso-8859-1"
        />
    </target>


    <!-- clean up intermediate files -->
    <target name="clean" depends="init_properties,work_dir_ok" >
        <delete file="${node_template_path}" />
        <delete file="${work_properties_path}" />
    </target>

</project>