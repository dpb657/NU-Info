<project name="apacheConfig" default="runTestServer" xmlns:ac="antlib:net.sf.antcontrib">
        <taskdef resource="net/sf/antcontrib/antlib.xml">
                <classpath>
                        <pathelement location="/usr/share/java/ant-contrib-1.0b3.jar"/>
                </classpath>
        </taskdef>

<!--
<loadfile property="other_nodes_file" srcFile="/local-adm-pub/config/other-nodes-fqdn.txt_test"/>
-->

<!-- node properties file path, fixed except for testing -->
<property name="node_properties_path"
          value="/local-adm-pub/config/this-node.properties" />

<loadproperties srcFile="${node_properties_path}" />

<!-- Don't put a trailing slash on directory paths , don't use spaces in directory paths-->
<var name="prod_config_dir" value="/etc/httpd/conf" />
<var name="prod_agent_config_dir" value="/var/local/web_agents/apache22_agent/Agent_001/config" />
<var name="test_agent_config_dir" value="/var/local/web_agents/apache22_agent/Agent_002/config" />
<var name="prod_stat_dir" value="/etc/httpd/conf" />
<var name="test_config_dir" value="/etc/httpd/test-conf" />
<var name="prod_script_dir" value="/etc/httpd/conf" />
<var name="test_script_dir" value="/etc/httpd/test-conf" />
<var name="conf_usergroup" value="root:wheel" />
<var name="conf_mode" value="640" />
<var name="conf_dir_mode" value="750" />
<var name="general_conf_files" value="httpd.conf:mime.types:main-only.conf:main-head.conf:virtual.conf:virtual-redirect.conf:policy-url-file.txt:virtual-host-map.txt" />

<!--

Start a port 8002 test server _without_ staging to production,
for local configuration testing on a web node

-->
<target name="runTestServer" >
    <echo>test config dir is ${test_config_dir}</echo>

    <!-- <if>
        <and>
            <isset property="quiet" />
            <istrue value="${quiet}" />
        </and>
        <then>
            <property name="verbose" value="false" />
        </then>
        <else>
            <property name="verbose" value="true" />
        </else>
    </if> -->

    <antcall target="setTestFilePermissions" />

    <antcall target="checkTestApache" />

    <!-- we rewrite the configuration files of the running server
        which is reasonable on Unix/Linux but might face file-locking issues on Windows -->

    <!-- regenerate the test access manager configuration -->
    <ant antfile="makeAgentTemplate.xml" target="install">
        <property name="mode" value="test" />
        <property name="library" value="${prod_config_dir}" />
        <property name="work_directory" value="${test_config_dir}" />
        <property name="input_directory" value="${test_config_dir}" />
    </ant>

    <antcall target="restartTestApache" />

    <!-- <if>
        <istrue value="${verbose}" />
        <then> -->
    <antcall target="countTestApacheProcesses" />

    <antcall target="tailTestApacheLog" />
    <!--    </then>
    </if>  -->

</target>

<!--
 runOneServer is a target for deploying files from test config
 to production config on current server

 It stages configuration from test to production
 and restarts both the test and production servers.

-->
<target name="runOneServer">
<!--<echo>prod config dir is ${prod_config_dir}</echo> -->

    <if>
        <and>
            <isset property="quiet" />
            <istrue value="${quiet}" />
        </and>
        <then>
            <property name="verbose" value="false" />
        </then>
        <else>
            <property name="verbose" value="true" />
        </else>
    </if>


    <antcall target="setTestFilePermissions" />

    <!-- Check the test configuration and fail if it is invalid -->
    <antcall target="checkTestApache" />

    <!-- We rewrite the configuration files of the running server
        which is reasonable on Unix/Linux but might face file-locking issues on Windows -->

    <!-- Stage text config files -->
    <antcall target="stageApache" />

    <!-- The basis of the Access Manager configuration: -->
    <antcall target="stageAccessManager" />

    <antcall target="setFilePermissions" />

    <!-- Regenerate the access manager configuration on the current node -->
    <!-- Access Manager Test -->
    <antcall target="installTestAMAgent" />

    <!-- Access Manager Production -->
    <antcall target="installProdAMAgent" />

    <!-- Check the new Production Apache configuration as a final
    sanity check before stopping any servers -->

    <antcall target="checkApache" />

    <!-- stop and later restart the test server for the benefit of load-balancing on port 8002 -->
    <antcall target="stopTestApache" />

    <!-- restart Apache Production -->
    <antcall target="restartApache" />

    <if>
        <istrue value="${verbose}" />
        <then>
            <antcall target="countApacheProcesses" />

            <antcall target="tailApacheLog" />
        </then>
    </if>

    <!-- Restart the test server for the benefit of load-balancing on port 8002 -->
    <antcall target="startTestApache" />

    <if>
        <istrue value="${verbose}" />
        <then>
            <antcall target="countTestApacheProcesses" />
        </then>
    </if>


    <echo>sleep 5 sec</echo>
    <sleep seconds="5"/>


</target>

<target name="installTestAMAgent">
    <ant antfile="makeAgentTemplate.xml" target="install">
        <property name="mode" value="test" />
        <property name="library" value="${prod_config_dir}" />
        <property name="work_directory" value="${test_config_dir}" />
        <property name="input_directory" value="${test_config_dir}" />
    </ant>
</target>

<target name="installProdAMAgent">
    <ant antfile="makeAgentTemplate.xml" target="install">
        <property name="mode" value="prod" />
        <property name="library" value="${prod_config_dir}" />
        <property name="work_directory" value="${prod_config_dir}" />
        <property name="input_directory" value="${prod_config_dir}" />
    </ant>
</target>


<target name="stageApache">

    <antcall target="stageConfFile">
        <param name="filename" value="httpd.conf"/>
    </antcall>

    <antcall target="stageConfFile">
        <param name="filename" value="main-only.conf"/>
    </antcall>

    <antcall target="stageConfFile">
        <param name="filename" value="main-head.conf"/>
    </antcall>

    <antcall target="stageConfFile">
        <param name="filename" value="virtual-redirect.conf"/>
    </antcall>

    <antcall target="stageVirtualConf" />

</target>

<!-- "Stage" a text config file from test to production -->
<!-- It is copied only if the files differ, not based on last-modified dates -->
<!-- parameter: "filename" -->
<target name="stageConfFile">
    <limit maxwait="30" failonerror="true" >
        <exec executable="/bin/csh">
            <arg value="${prod_script_dir}/stage-conf-file.csh"/>
            <arg value="${filename}"/>
        </exec>
   </limit>
</target>

<!-- copy virtual conf from test to production, removing references to port 8002 -->
<target name="stageVirtualConf">
    <limit maxwait="30" failonerror="true" >

        <exec executable="rm">
            <arg value="${prod_config_dir}/virtual.conf"/>
        </exec>

        <exec executable="/bin/csh">
            <arg value="${prod_script_dir}/strip-port-8002_wrapper.csh"/>
            <arg value="${test_config_dir}/test-virtual.conf" />
            <arg value="${prod_config_dir}/virtual.conf" />
        </exec>
   </limit>

</target>

<target name="stopApache" depends="checkApache">
    <!-- stop the production apache configuration, fail if it is invalid -->
    <property name="quiet" value="false" />
    <antcall target="manageApache" >
        <param name="action" value="stop" />
        <param name="quiet" value="${quiet}" />
    </antcall>
</target>

<target name="stopTestApache">
    <!-- stop the test apache configuration, fail if it is invalid -->
    <property name="quiet" value="false" />
    <antcall target="manageTestApache" >
        <param name="action" value="stop" />
        <param name="quiet" value="${quiet}" />
    </antcall>
</target>

<target name="startApache">
    <!-- start the production apache configuration, fail if it is invalid -->
    <property name="quiet" value="false" />
    <antcall target="manageApache" >
        <param name="action" value="start" />
        <param name="quiet" value="${quiet}" />
    </antcall>
</target>

<target name="startTestApache">
    <!-- start the test apache configuration, fail if it is invalid -->
    <property name="quiet" value="false" />
    <antcall target="manageTestApache" >
        <param name="action" value="start" />
        <param name="quiet" value="${quiet}" />
    </antcall>
</target>

<target name="restartApache" depends="checkApache">
    <!-- restart the production apache configuration, fail if it is invalid -->
    <property name="quiet" value="false" />
    <antcall target="manageApache" >
        <param name="action" value="restart" />
        <param name="quiet" value="${quiet}" />
    </antcall>
</target>

<target name="restartTestApache">
    <!-- restart the test apache configuration, fail if it is invalid -->
    <property name="quiet" value="false" />
    <antcall target="manageTestApache" >
        <param name="action" value="restart" />
        <param name="quiet" value="${quiet}" />
    </antcall>
</target>

<target name="manageApache">
    <!-- pass arguments to the Production Apache start/stop script -->

    <!-- fail if the underlying script fails -->
    <!-- output control -->
    <if>
        <and>
            <isset property="quiet" />
            <istrue value="${quiet}" />
        </and>
        <then>
            <property name="quiet" value="true" />
        </then>
        <else>
            <property name="quiet" value="false" />
        </else>
    </if>
    <fail message="manageApache action action code is missing">
        <condition>
            <or>
                <not><isset property="action" /></not>
                <equals arg1="${action}" arg2="" trim="true" />
            </or>
        </condition>
    </fail>
    <echo>local on ${fqdn} /etc/init.d/web ${action}</echo>
    <limit maxwait="60" failonerror="true" >
        <exec executable="/bin/sh"
            failonerror="true" >
            <arg value="/etc/init.d/web" />
            <arg value="${action}" />
            <env key="CLUSTER_ANT_QUIET" value="${quiet}" />
        </exec>
    </limit>
</target>

<target name="manageTestApache">
    <!-- pass arguments to the Test Apache start/stop script -->

    <!-- fail if the underlying script fails -->
    <!-- default arguments -->
    <property name="action" value="graceful" />
    <!-- output control -->
    <if>
        <and>
            <isset property="quiet" />
            <istrue value="${quiet}" />
        </and>
        <then>
            <property name="quiet" value="true" />
        </then>
        <else>
            <property name="quiet" value="false" />
        </else>
    </if>
    <fail message="manageTestApache action action code is missing">
        <condition>
            <or>
                <not><isset property="action" /></not>
                <equals arg1="${action}" arg2="" trim="true" />
            </or>
        </condition>
    </fail>
    <echo>local on ${fqdn} /etc/init.d/testweb ${action}</echo>
    <limit maxwait="60" failonerror="true" >
        <exec executable="/bin/sh"
            failonerror="true" >
            <arg value="/etc/init.d/testweb" />
            <arg value="${action}" />
            <env key="CLUSTER_ANT_QUIET" value="${quiet}" />
        </exec>
    </limit>
</target>

<target name="countTestApacheProcesses">
    <!-- show counts of Apache processes as the test server starts, ignore errors -->
    <trycatch>
        <try>
            <sleep seconds="2"/>
            <limit maxwait="30" failonerror="true" >
                <exec executable="/bin/sh">
                    <arg value="-c" />
                    <arg value="(/bin/ps -fu webtest |grep httpd| /usr/bin/wc -l)" />
                </exec>
            </limit>
        </try>
        <catch />
    </trycatch>
</target>

<target name="countApacheProcesses">
    <!-- show counts of Apache processes as the prod server starts, ignore errors -->
    <trycatch>
        <try>
            <sleep seconds="2"/>
            <limit maxwait="30" failonerror="false" >
                <exec executable="/bin/sh">
                    <arg value="-c" />
                    <arg value="(/bin/ps -fu webserv |grep httpd| /usr/bin/wc -l)" />
                </exec>
            </limit>
        </try>
        <catch />
    </trycatch>
</target>


<target name="tailTestApacheLog">
    <!-- tail the Apache log as the test server starts, ignore errors -->
    <!-- with a name like error_log_chnuinfow3.2011-11-18-00_00_00.txt -->
    <trycatch>
        <try>
            <tstamp>
                <format property="rotatelogs_date_stamp" pattern="yyyy-MM-dd" />
            </tstamp>
            <property name="error_log_path"
                value="/var/log/test-httpd/error_log_${shortname}.${rotatelogs_date_stamp}-00_00_00.txt" />
            <echo message="startup log for ${fqdn} port 8002 test" level="info" />
            <limit maxwait="20" failonerror="false" >
                <exec executable="/usr/bin/tail">
                    <arg value="-10" />
                    <arg value="${error_log_path}" />
                </exec>
            </limit>
        </try>
        <catch />
    </trycatch>
</target>

<target name="tailApacheLog">
    <!-- tail the Apache log as the prod server starts, ignore errors -->
    <!-- with a name like error_log_chnuinfow3.2011-11-18-00_00_00.txt -->
    <trycatch>
        <try>
            <tstamp>
                <format property="rotatelogs_date_stamp" pattern="yyyy-MM-dd" />
            </tstamp>
            <property name="error_log_path"
                value="/var/log/httpd/error_log_${shortname}.${rotatelogs_date_stamp}-00_00_00.txt" />
            <echo message="startup log for ${fqdn} port 80 prod" level="info" />
            <limit maxwait="20" failonerror="false" >
                <exec executable="/usr/bin/tail">
                    <arg value="-10" />
                    <arg value="${error_log_path}" />
                </exec>
            </limit>
        </try>
        <catch />
    </trycatch>
</target>

<!--
Don't do this, it is inefficent:
/etc/init.d/web has a restart action
<target name="restartApache">
        <antcall target="stopApache" />
        <antcall target="startApache" />
</target>


<target name="restartTestApache">
        <antcall target="stopTestApache" />
        <antcall target="startTestApache" />
</target>
-->

<target name="setFilePermissions" >
    <limit maxwait="30" failonerror="true" >
        <exec executable="/bin/ksh"
        failonerror="true" >
            <!-- <arg value="-vx" /> -->
            <arg value="${prod_script_dir}/set-file-perms.ksh"/>
            <arg value="local" />
            <arg value="${conf_usergroup}" />
            <arg value="${conf_mode}" />
            <arg value="${conf_dir_mode}" />
            <arg value="${prod_script_dir}" />
            <arg value="${general_conf_files}" />
        </exec>
  </limit>
  <!-- Add another call for private conf user group: refer gnumakefile -->
</target>

<!-- set permissions on test config only -->
<target name="setTestFilePermissions" >
    <limit maxwait="30" failonerror="true" >
    <exec executable="/bin/ksh"
    failonerror="true" >
        <!-- <arg value="-vx" /> -->
        <arg value="${prod_script_dir}/set-file-perms.ksh"/>
        <arg value="local" />
        <arg value="${conf_usergroup}" />
        <arg value="${conf_mode}" />
        <arg value="${conf_dir_mode}" />
        <arg value="${test_config_dir}" />
        <arg value="${general_conf_files}" />
    </exec>
  </limit>
</target>

<target name="checkApache">
    <!-- check the production apache configuration, fail if it is invalid -->
    <!-- check the test apache configuration, fail if it is invalid -->
    <trycatch>
        <try>
            <limit maxwait="30" failonerror="true" >
                <exec executable="/bin/sh"
                    failonerror="true" >
                    <arg value="/etc/init.d/web" />
                    <arg value="check" />
                </exec>
            <echo>prod config OK ${fqdn}</echo>
            </limit>
       </try>
       <catch>
         <antcall target="tailApacheLog" />
       </catch>
    </trycatch>
</target>

<target name="checkTestApache">
    <!-- check the test apache configuration, fail if it is invalid -->
    <trycatch>
        <try>
            <limit maxwait="30" failonerror="true" >
                <exec executable="/bin/sh"
                    failonerror="true" >
                    <arg value="/etc/init.d/testweb" />
                    <arg value="check" />
                </exec>
                <echo>test config OK ${fqdn}</echo>
            </limit>
       </try>
       <catch>
         <antcall target="tailTestApacheLog" />
       </catch>
    </trycatch>
</target>

<target name="stageAccessManager">

    <antcall target="stageConfFile">
         <param name="filename" value="virtual-host-map.txt"/>
    </antcall>

    <antcall target="stageConfFile">
         <param name="filename" value="policy-url-file.txt"/>
    </antcall>

</target>


</project>

